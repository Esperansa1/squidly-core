1) Contracts & Folders
Create includes/domains/payments/interfaces/PaymentProvider.php
Methods (names only, no code):
- startPayment(squidly_order_id, amount, billing_fields) -> checkout_url
- refund(squidly_order_id, amount, reason) -> {success, message, refund_id?}
- label() -> string

Create scaffolding folders (empty for now):
- includes/domains/payments/gateways/ (providers live here)
- includes/domains/payments/services/ (factory/service)
- includes/domains/payments/rest/ (REST layer)
- includes/domains/payments/hooks/ (WordPress hooks)
- includes/domains/payments/activation/ (activation routines)
- includes/domains/payments/admin/ (WP-Admin UI actions)
- includes/domains/payments/bootstrap/ (wire-up file)

2) Provider Selection (Service Layer)
File: includes/domains/payments/services/PaymentService.php
Single service responsible for handing out the active provider.
Default provider: WooProvider.

In the constructor of PaymentService, check if a provider instance was passed in.
If not, default to new WooProvider().
Apply filter hook (name it: squidly/payments/provider) to allow replacement.
The rest of Squidly touches only the service; never the provider directly.

3) Woo Provider — Behavior (Words)
Role: use WooCommerce only as a payment router. Squidly remains source of truth for orders.

On startPayment:
- Validate Woo is active and hidden payment product ID option exists.
- Convert amount to a decimal string with 2 decimals (money-safe), no rounding errors.
- Programmatically create a Woo order:
  - Status: pending.
  - Created via: "squidly".
  - Add the hidden virtual product (qty 1).
  - Force order total to the requested amount.
  - Apply provided billing fields (first/last/email/phone/address/city/postcode/country).
  - Add a back-reference meta _squidly_order_id.
  - Persist Woo order ID on Squidly order meta _wc_order_id.
  - Set Squidly _payment_status=pending.
- Return Woo's checkout URL (payment page) to caller.

On refund:
- Load Woo order by saved _wc_order_id.
- Invoke Woo's refund API (payment gateway refund).
- Return structured result (success, message, refund_id if any).
- Squidly status will also be updated by hooks; still update optimistically to refunded after a successful call.

On label(): return "WooCommerce".

4) Hidden "Payment" Product (Activation Routine)
On plugin activation:
- If option squidly_wc_payment_product_id is absent or invalid:
  - Create a virtual, hidden, sold individually product named "Squidly Payment".
  - Price 0 (order total will be overridden programmatically).
  - Save its ID in the option.
- Purpose: give Woo a legitimate line item so taxes/fees/gateways work consistently, while total is controlled.

5) Payment Status Sync (Hooks — Words)
File: includes/domains/payments/hooks/PaymentStatusSync.php
Register WordPress hooks on init using woocommerce_order_status_* actions:
- woocommerce_order_status_processing → map to Squidly paid
- woocommerce_order_status_completed → map to Squidly paid  
- woocommerce_order_status_failed → map to Squidly failed
- woocommerce_order_status_refunded → map to Squidly refunded
- woocommerce_order_status_cancelled → map to Squidly failed
- woocommerce_order_status_on-hold → map to Squidly pending

On each transition:
- Read _squidly_order_id from Woo order meta.
- Update Squidly meta:
  - _payment_status: paid | failed | refunded | pending.
  - _tx_id: Woo transaction id (if present) when paid.

6) REST Endpoints (Backend Only)
Namespace: squidly/v1.
Endpoints:

POST /pay/start
- Body: { order_id, amount, billing? }
- Action: call provider.startPayment → return { checkout_url }.
- Permissions: backend-only (admin-capability).

POST /pay/refund
- Body: { order_id, amount, reason? }
- Action: call provider.refund → return { success, message, refund_id? }.
- Permissions: backend-only.

Error responses: clear message; no stack traces; 4xx for validation, 5xx for provider/infra errors.

7) Admin Triggers (Orders List)
File: includes/domains/payments/admin/PaymentAdminActions.php
JavaScript: includes/domains/payments/admin/js/payment-admin.js

In Squidly orders WP-Admin list row actions:
- Add "Pay" → JS prompt for amount → call /pay/start → open checkout URL in new tab.
- Add "Refund" → JS prompt for amount → call /pay/refund → alert result.

Enqueue JavaScript on edit.php page for squidly_order post type.
Secure with:
- Nonces per row action.
- Capability checks (manage_options).

These are convenience actions; front-end remains out of scope.

8) Data Model — Keys & Options
Squidly order meta:
- _wc_order_id (int): paired Woo order ID.
- _payment_status (string): pending|paid|failed|refunded.
- _tx_id (string): Woo/gateway transaction id.

Woo order meta:
- _squidly_order_id (int): back-reference to Squidly.

Options:
- squidly_wc_payment_product_id (int).